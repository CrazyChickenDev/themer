import fs from 'pn/fs';
import path from 'path';

const getPackageName = theme => `themer-${theme}-syntax`;
const getFilePath = (theme, filename) => path.resolve(getPackageName(theme), filename);

export const toColorSets = colors => Object.entries(colors).map(([theme, colors]) => ({ theme: theme, colors: colors }));

export const render = (colors) => {
  const colorSets = toColorSets(colors);
  return [
    ...renderPackageJsonFiles(colorSets),
    ...renderColorVariablesFiles(colorSets),
    ...renderSyntaxVariablesFiles(colorSets),
    ...renderIndexFiles(colorSets),
  ];
};

const renderPackageJsonFiles = (colorSets) => colorSets.map(colorSet => Promise.resolve({
  name: getFilePath(colorSet.theme, 'package.json'),
  contents: Buffer.from(JSON.stringify({
    name: getPackageName(colorSet.theme),
    theme: 'syntax',
    version: '0.0.0',
    description: `${colorSet.theme} syntax theme, generated by themer`,
    keywords: [
      'themer',
      colorSet.theme,
      'syntax',
      'theme',
    ],
    engines: {
      atom: '>=1.0.0 <2.0.0',
    },
  })),
}));

const renderColorVariablesFiles = (colorSets) => {
  const getContents = colors => Buffer.from(Object.entries(colors).map(
    ([name, value]) => `@${name}: ${value};`
  ).join('\n'));
  return colorSets.map(colorSet => Promise.resolve({
    name: getFilePath(colorSet.theme, 'colors.less'),
    contents: getContents(colorSet.colors),
  }));
};

const renderViaCopy = (filename, colorSets) => colorSets.map(colorSet => fs.readFile(path.resolve('lib', filename)).then(contents => ({
  name: getFilePath(colorSet.theme,  filename),
  contents: contents,
})));

const renderSyntaxVariablesFiles = renderViaCopy.bind(null, 'syntax-variables.less');
const renderIndexFiles = renderViaCopy.bind(null, 'index.less');
